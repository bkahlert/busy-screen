trace = false

name = busy-screen
os = Raspberry Pi OS Lite

timezone = Europe/Berlin

hostname {
  name: busy-${BUSY_SCREEN__USERNAME}
  random-suffix: false
}

wifi {
  wpa-supplicant = ${BUSY_SCREEN__WPA_SUPPLICANT}
  //    auto-reconnect = true
  power-safe-mode = false
}

size = 12 GiB

ssh {
  enabled: true
  port: 3421
  authorized-keys {
    //      files: ["$HOME/.ssh/id_*.pub"]
    keys: [${BUSY_SCREEN__AUTHORIZED_KEY}]
  }
}

default-user {
  newUsername: ${BUSY_SCREEN__USERNAME}
  newPassword: ${BUSY_SCREEN__PASSWORD}
}

//samba {
//  homeShare: true
//  rootShare: read-only
//}

# TODO currently no DHCP release received; needs manual configuration on host side (192.168.168.162; 255.255.255.240)
usb-gadgets {
  ethernet {
    dhcpRange: 192.168.168.160..192.168.168.174
    deviceAddress: 192.168.168.168
    hostAsDefaultGateway: true
    enableSerialConsole: false
    manufacturer: Björn Kahlert,
    product: Busy Screen of ${BUSY_SCREEN__USERNAME},
  }
}

tweaks {
  apt-retries: 10
}

files = [
  {
    host-path: node-red
    disk-path: /home/${BUSY_SCREEN__USERNAME}/.node-red
  },
  {
    host-path: public_html
    disk-path: /home/${BUSY_SCREEN__USERNAME}/busy-screen/public_html
  },
  {
    append: """
      {
        "name": "open \"http://"""${usb-gadgets.ethernet.deviceAddress}"""\" in your browser",
        "task": "GETTING STARTED"
        "duration": "PT10M"
      }
      """,
    disk-path: /home/${BUSY_SCREEN__USERNAME}/busy-screen/status.json
  },
  {
    append: """
      # reduce flash drive IO
      tmpfs /tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=100M 0 0
      tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=100M 0 0
      tmpfs /var/log tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755 0 0
      """,
    disk-path: /etc/fstab
  },
]

setup = [
  //  {
  //    name: update
  //    scripts: [
  //      {
  //        name: "ː̗̀٩꒰ꋃ꒱وː̖́ UPDATE ೕ(˃̵ᴗ˂̵ ๑)"
  //        content: """
  //            apt-get -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false update
  //            apt-get -yq dist-upgrade
  //            """
  //      }
  //    ]
  //  },
  {
    name: the basics
    scripts: [
      {
        name: "set keyboard layout to de ✧٩(•́⌄•́๑)"
        content: """
            sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
            """
      },
      {
        name: "٩(｡•ω•｡)و install build tools"
        content: """
            apt-get -qq update
            apt-get -qq install build-essential git
            """
      },
      {
        name: "(۶•̀ᴗ•́)۶ install Python 3 pip"
        content: """
            apt-get -qq install python3-pip
            """
      },
      //        {
      //          name: "install health checks ٩(✪ꀾ⍟༶)و"
      //          content: """
      //              command -v sch >/dev/null 2>&1 || { apt-get update; pip3 install sch; }
      //              """
      //        }
    ]
  },
  {
    name: misc
    scripts: [
      {
        name: "Install Avahi ٩( ᐛ )و"
        content: """
            apt-get -qq install avahi-daemon
            mkdir -p /etc/avahi/services
            """
      },
      {
        name: "⌒⌒ ⌒ “⊂( っ☉ω☉)っ Disable User Service Publishing"
        content: """
            sed -i 's/.*disable-user-service-publishing.*/disable-user-service-publishing=yes/g' /etc/avahi/avahi-daemon.conf
            """
      },
      {
        name: "Configure Avahi (*≧∀≦)ﾉ DEVICE-INFO"
        content: """
            cat <<EOF >/etc/avahi/services/device-info.service
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">┴┬┴┤´Ｏ´)ﾉ  """${BUSY_SCREEN__USERNAME}"""!?  Σ(‘Д’⁕)</name>
              <service>
                <type>_device-info._tcp</type>
                <port>0</port>
                <txt-record>model=AirPortExtreme5</txt-record>
                <!-- check /System/Library/CoreServices/CoreTypes.bundle/Contents/Info.plist for all possible values -->
              </service>
            </service-group>
            EOF
            """
      },
      {
        name: "Configure Avahi (*≧∀≦)ﾉ SSH"
        content: """
            cat <<EOF >/etc/avahi/services/ssh.service
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">Busy Screen of """${BUSY_SCREEN__USERNAME}"""</name>
              <service>
                <type>_ssh._tcp</type>
                <port>"""${ssh.port}"""</port>
                <txt-record>user="""${BUSY_SCREEN__USERNAME}"""</txt-record>
              </service>
            </service-group>
            EOF
            """
      },
      {
        name: "Configure Avahi (*≧∀≦)ﾉ SFTP"
        content: """
            cat <<EOF >/etc/avahi/services/sftp.service
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">Busy Screen of """${BUSY_SCREEN__USERNAME}"""</name>
              <service>
                <type>_sftp-ssh._tcp</type>
                <port>"""${ssh.port}"""</port>
                <txt-record>path=/home/"""${BUSY_SCREEN__USERNAME}"""</txt-record>
                <txt-record>u="""${BUSY_SCREEN__USERNAME}"""</txt-record>
              </service>
            </service-group>
            EOF
            """
      },
      {
        name: "Configure Avahi (*≧∀≦)ﾉ SMB"
        content: """
            cat <<EOF >/etc/avahi/services/smb.service
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">Busy Screen of """${BUSY_SCREEN__USERNAME}"""</name>
              <service>
                <type>_smb._tcp</type>
                <port>445</port>
                <txt-record>user="""${BUSY_SCREEN__USERNAME}"""</txt-record>
                <txt-record>path=/home</txt-record>
              </service>
            </service-group>
            EOF
            """
      },
      {
        name: "Configure Avahi (*≧∀≦)ﾉ BUSY SCREEN"
        content: """
            cat <<EOF >/etc/avahi/services/busy-screen.service
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">Busy Screen of """${BUSY_SCREEN__USERNAME}"""</name>
              <service>
                <type>_http._tcp</type>
                <port>80</port>
                <txt-record>user="""${BUSY_SCREEN__USERNAME}"""</txt-record>
                <txt-record>port=1880</txt-record>
              </service>
            </service-group>
            EOF
            """
      },
      {
        name: "Enable Avahi (ง ͡ʘ ͜ʖ ͡ʘ)ง"
        content: """
            systemctl enable avahi-daemon
            systemctl start avahi-daemon
            """
      },
      {
        name: "restart avahi"
        content: """
            systemctl restart --no-block avahi-daemon
            """
      },
      {
        name: "install browser Σ⊂⊂(☉ω☉∩)"
        sources: [
          "https://maker-tutorials.com/autostart-midori-browser-vollbild-kiosk-mode-via-konsole-ohne-desktop/",
          "https://www.matteomattei.com/web-kiosk-with-raspberry-pi-and-read-only-sd/",
        ],
        content: """
          apt-get -qq install midori matchbox-window-manager xserver-xorg x11-xserver-utils unclutter xinit
          apt-get -qq install ttf-mscorefonts-installer fonts -qq-dejavu fonts-dejavqq-extra-qq


          # user needs to handle /dev/tty devices
          gpasswd -a """${BUSY_SCREEN__USERNAME}""" tty


          # set permissions of /dev/tty to defined state
          sed -i '/^exit 0/c\chmod g+rw /dev/tty?\nexit 0' /etc/rc.local


          # kiosk start script
          cat <<EOF >/home/"""${BUSY_SCREEN__USERNAME}"""/kiosk.sh
          #!/bin/bash
          ~/wait-for-webserver.sh
          xinit ~/start-browser.sh
          EOF
          chmod +x /home/"""${BUSY_SCREEN__USERNAME}"""/kiosk.sh

          # wait-for-webserver.sh
          cat <<EOF >/home/"""${BUSY_SCREEN__USERNAME}"""/wait-for-webserver.sh
          #!/bin/bash
          'timeout' '300s' 'sh' '-c' 'while true; do
            _block=▀
            _reset="$(tput sgr0)"
            _frame=${_frame:-0}
            _frames=2

            upper_gray="$(tput setaf 0)"
            lower_gray="$(tput setab 0)"
            upper_white="$(tput setaf 3)"
            lower_white="$(tput setab 3)"
            upper_red="$(tput setaf 1)"
            lower_red="$(tput setab 1)"
            upper_black="$(tput setaf 7)"
            lower_black="$(tput setab 7)"
            if [ $_frame -eq 0 ]; then
              upper_white="$upper_gray"
              lower_white="$lower_gray"
              upper_red="$upper_gray"
              lower_red="$lower_gray"
            fi
            ww="$lower_white$upper_white${_block}$_reset"
            rw="$lower_white$upper_red${_block}$_reset"
            xw="$lower_white$upper_black${_block}$_reset"
            tw="$lower_white$upper_gray${_block}$_reset"
            wr="$lower_red$upper_white${_block}$_reset"
            rr="$lower_red$upper_red${_block}$_reset"
            xr="$lower_red$upper_black${_block}$_reset"
            tr="$lower_red$upper_gray${_block}$_reset"
            wx="$lower_black$upper_white${_block}$_reset"
            rx="$lower_black$upper_red${_block}$_reset"
            xx="$lower_black$upper_black${_block}$_reset"
            tx="$lower_black$upper_gray${_block}$_reset"
            wt="$lower_gray$upper_white${_block}$_reset"
            rt="$lower_gray$upper_red${_block}$_reset"
            xt="$lower_gray$upper_black${_block}$_reset"
            tt="$lower_gray$upper_gray${_block}$_reset"

            cols=$(tput cols)
            rows=$(tput lines)
            top_rows=$(((rows-7)/2))
            bottom_rows=$((rows-7-top_rows-1))
            line=$lower_gray$(printf "%*.0s\n" "$cols" "" | tr " " " ")$_reset

            prefix_cols=$(((cols-89)/2))
            postfix_cols=$((cols-89-prefix_cols))
            prefix=$lower_gray$(printf "%*.0s" "$prefix_cols" "" | tr " " " ")$_reset
            postfix=$lower_gray$(printf "%*.0s" "$postfix_cols" "" | tr " " " ")$_reset

            tput home
            for x in $(seq 1 "$top_rows"); do echo "$line"; done

            echo "$prefix$tt$tx$xr$xr$xr$tx$tt$tt$tt$tx$xt$xt$xt$tx$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$postfix"
            echo "$prefix$xx$rr$ww$wr$rr$rr$xr$tx$xt$tt$tt$tt$tt$tt$xx$tt$tt$tt$tt$tt$tx$tx$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tx$tx$tt$tt$tt$tx$tx$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$postfix"
            echo "$prefix$xx$rr$rr$rr$rr$rr$rr$rr$tt$tt$tt$tt$tt$tt$xx$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$tt$tt$tt$tx$tx$tx$tx$tx$tt$tt$tt$tx$tx$tx$tx$tx$tt$tt$tt$tx$tx$tx$tx$xx$xx$tt$tt$tx$tx$tx$tt$tt$tt$tx$tx$tx$tx$tx$tx$tt$tt$tt$tx$tx$tx$tx$tx$tx$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$postfix"
            echo "$prefix$tt$xt$rx$rr$rr$rr$rr$rr$tt$tt$tt$tt$tx$xt$tt$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tx$tx$tx$tx$xx$xx$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$postfix"
            echo "$prefix$tt$tt$tt$xt$rx$rr$rr$rr$tt$tt$tx$xt$tt$tt$tt$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$xx$xx$tt$tt$tt$xx$xx$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$tt$tt$xx$xx$tt$xt$xx$tx$tx$tx$xx$xx$tt$tt$tt$tt$tx$tx$tt$tt$tt$tx$tx$tt$tt$tt$tx$tx$postfix"
            echo "$prefix$tt$tt$tt$tt$tt$xt$rx$rr$tx$xt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$xt$xt$xt$xt$xt$xt$tt$tt$xt$xt$xt$xt$xt$tt$tt$tt$xt$xt$xt$xt$xt$xt$tt$tt$xt$xt$xt$xt$xt$xt$tt$xt$xt$xt$xt$xt$xt$tt$xt$xt$tt$tt$tt$xt$xt$tt$tt$tt$tt$tt$tt$xx$xx$tt$tt$tt$tt$xt$xt$tt$tt$tt$xt$xt$tt$tt$tt$xt$xt$postfix"
            echo "$prefix$tt$tt$tt$tt$tt$tt$tt$xt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$xt$xt$xt$xt$xt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$tt$postfix"

            for x in $(seq 1 "$bottom_rows"); do echo "$line"; done

            _frame=$((_frame+1))
            if [ $_frame -ge $_frames ]; then _frame=0; fi

            curl --silent --fail --max-time 1 '"'"'http://localhost/'"'"' > /dev/null \
              && curl --silent --fail --max-time 1 '"'"'http://localhost:1880/'"'"' > /dev/null \
              && break
            sleep 1
          done'
          EOF
          chmod +x /home/"""${BUSY_SCREEN__USERNAME}"""/wait-for-webserver.sh

          # start-browser.sh
          cat <<EOF >/home/"""${BUSY_SCREEN__USERNAME}"""/start-browser.sh
          #!/bin/bash
          echo "Hit Ctrl+Alt+F1 to quit"
          # disable DPMS (Energy Star) features
          xset -dpms
          # disable screen saver
          xset s off
          # don't blank the video device
          xset s noblank
          # disable mouse pointer
          # unclutter &
          # run window manager
          matchbox-window-manager -use_cursor no -use_titlebar no  &
          # run browser
          midori -e Fullscreen -e Navigationbar -a http://localhost/
          EOF
          chmod +x /home/"""${BUSY_SCREEN__USERNAME}"""/start-browser.sh


          # autostart
          cat <<EOF >>/home/"""${BUSY_SCREEN__USERNAME}"""/.bashrc
          # start kiosk unless logged in through SSH session
          if [ -z "\${SSH_TTY}" ]; then
            ~/kiosk.sh
          fi
          EOF


          # debug
          cat <<EOF >/home/"""${BUSY_SCREEN__USERNAME}"""/close_kiosk.sh
          #!/bin/bash
          kill "$(pgrep X)"
          EOF
          chmod +x /home/"""${BUSY_SCREEN__USERNAME}"""/close_kiosk.sh
          """
      },
      //        {
      //          name: "Bluetooth ೕ(˃̵ᴗ˂̵ ๑)"
      //          content: """
      //              apt-get -qq install bluez-tools
      //              """
      //        },
      {
        name: "Install Node-RED  ✧٩(ˊωˋ*)و✧"
        content: """
            apt-get -qq install build-essential git curl libavahi-compat-libdnssd-dev libudev-dev

            curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered > /home/"""${BUSY_SCREEN__USERNAME}"""/node-red.sh
            chmod +x /home/"""${BUSY_SCREEN__USERNAME}"""/node-red.sh
            sudo -u """${BUSY_SCREEN__USERNAME}""" /home/"""${BUSY_SCREEN__USERNAME}"""/node-red.sh --confirm-install --confirm-pi
            rm /home/"""${BUSY_SCREEN__USERNAME}"""/node-red.sh

            sudo -u """${BUSY_SCREEN__USERNAME}""" /bin/sh -c 'cd /home/"""${BUSY_SCREEN__USERNAME}"""/.node-red && npm install --unsafe-perm --no-update-notifier --no-fund --only=production \
              node-red-dashboard \
              node-red-contrib-play-audio \
              node-red-contrib-huemagic \
              node-red-contrib-ip \
              node-red-node-discovery \
              node-red-node-ui-iframe \
              node-red-node-ui-webcam'

            # start node-red for some time to have settings.json created
            timeout 5m node-red-pi --max-old-space-size=256

            # monaco editor
            sed -i 's/\(.*lib: \).*/\1"monaco",/' /home/"""${BUSY_SCREEN__USERNAME}"""/.node-red/settings.js
            sed -i 's/\(.*lib: \).*/\1"monaco",/' /home/bkahlert/.node-red/settings.js

            # external dependencies in node's setup tab
            sed -i 's/\(.*functionExternalModules: \).*/\1true,/' /home/"""${BUSY_SCREEN__USERNAME}"""/.node-red/settings.js
            sed -i 's/\(.*functionExternalModules: \).*/\1true,/' /home/bkahlert/.node-red/settings.js

            # runtime will attempt to automatically install missing modules
            sed -i 's/\(.*\)\/\/ \(.*autoInstall: \)\w*,\(.*\)/\1\2true\3/' /home/"""${BUSY_SCREEN__USERNAME}"""/.node-red/settings.js
            sed -i 's/\(.*\)\/\/ \(.*autoInstall: \)\w*,\(.*\)/\1\2true\3/' /home/bkahlert/.node-red/settings.js

            systemctl enable nodered
            systemctl start nodered
            """
      },
      {
        name: """┴┬┴┤´Ｏ´)ﾉ  Install Busy Screen for """${BUSY_SCREEN__USERNAME}"""!?  Σ(‘Д’⁕)"""
        content: """
            apt-get -qq install apache2
            sed -i 's/\(.*DocumentRoot \).*/\1\/home\/"""${BUSY_SCREEN__USERNAME}"""\/busy-screen\/public_html/g' /etc/apache2/sites-enabled/000-default.conf
            sed -i 's/^.*DocumentRoot.*/&\n        <Directory \/home\/"""${BUSY_SCREEN__USERNAME}"""\/busy-screen\/public_html>\n          Options Indexes\n          Require all granted\n        <\/Directory>/' /etc/apache2/sites-enabled/000-default.conf

            # replace ${APACHE_LOG_DIR} to not log to apache sub directory of /var/log since that's deleted because of tmpfs
            find /etc/apache2 \( -type d -name .git -prune \) -o -type f -print0 | xargs -0 sed -i 's/${APACHE_LOG_DIR}\//\/var\/log\/apache-/'

            mkdir -p /home/"""${BUSY_SCREEN__USERNAME}"""/busy-screen/public_html
            chown -R """${BUSY_SCREEN__USERNAME}""":"""${BUSY_SCREEN__USERNAME}""" /home/"""${BUSY_SCREEN__USERNAME}"""/busy-screen
            chmod -R a+x /home/"""${BUSY_SCREEN__USERNAME}"""/busy-screen
            systemctl enable apache2
            systemctl restart apache2
            """
      },
    ]
  },
]
// (ง ͡ʘ ͜ʖ ͡ʘ)ง
// ٩(๑˃̵ᴗ˂̵)
// ٩(ˊᗜˋ*)و
first-boot = [
  //    {
  //      name: "Tailscale VPN Client ✧٩(•́⌄•́๑)و ✧"
  //      content: """
  //          apt-get -qq install apt-transport-https
  //          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.gpg | apt-key add -
  //          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.list | tee /etc/apt/sources.list.d/tailscale.list
  //          apt-get update
  //          apt-get -qq install tailscale
  //          touch /home/"""${BUSY_SCREEN__USERNAME}"""/README.md
  //          echo 'Tailscale VPN Client' > /home/"""${BUSY_SCREEN__USERNAME}"""/README.md
  //          echo '[ ] `tailscale up --authkey """${BUSY_SCREEN__TAILSCALE}""" && ip addr show tailscale0`' > /home/"""${BUSY_SCREEN__USERNAME}"""/README.md
  //          echo '[ ] Visit https://login.tailscale.com/admin/authkeys to create a new key if the command fails' > /home/"""${BUSY_SCREEN__USERNAME}"""/README.md
  //          """
  //    },
  {
    name: "Use available space ٩(ˊᗜˋ*)و"
    content: """
        raspi-config --expand-rootfs
        """
  },
  {
    name: "٩(๑•̀ㅂ•́)و auto-login"
    content: """
        cat <<EOF >/etc/systemd/system/getty@tty1.service.d/autologin.conf
        [Service]
        ExecStart=
        ExecStart=-/sbin/agetty --autologin """${BUSY_SCREEN__USERNAME}""" --noclear %I 38400 linux
        EOF
        """
  },
  {
    name: "(۶•̀ᴗ•́)۶ REBOOT"
    content: """
        shutdown -r now
        """
  },
]
